pkgbase=linux-timw
pkgver=6.18.2025.08.29
pkgrel=1
arch=(x86_64)
source=(linux-next::git+https://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git 0001-linux6.17-rc1-bore-6.5.2.patch 0002-sched-fair-Prefer-full-idle-SMT-cores-by-Andrea-Righ.patch config)
makedepends=(git bc cpio gettext libelf pahole perl python rust rust-bindgen rust-src tar xz)
install=linux-timw.install

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

pkgver() {
  cd linux-next
  git describe --long --tags |  sed 's/next.//;s/\([^-]*-g\)/r\1/;s/-/./g'
}

prepare() {
  cd linux-next
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    src="${src%.zst}"
    [[ $src = *.patch ]] || continue
    patch -Np1 < "../$src"
  done

  cp ../config .config
  make olddefconfig CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 KCFLAGS="-march=native -mtune=native -O3 -pipe"
  #make nconfig CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 KCFLAGS="-march=native -mtune=native -O3 -pipe"
  diff -u ../config .config || :

  make -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"
}

build() {
  cd linux-next
  make all CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 KCFLAGS="-march=native -mtune=native -O3 -pipe"
  make -C tools/bpf/bpftool vmlinux.h feature-clang-bpf-co-re=1 CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 KCFLAGS="-march=native -mtune=native -O3 -pipe"
}

_package() {
  depends=(coreutils initramfs kmod)
  provides=(KSMBD-MODULE NTSYNC-MODULE VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE)
  cd linux-next
  local modulesdir="$pkgdir/usr/lib/modules/$(<version)"

  install -Dm644 "$(make -s image_name)" "$modulesdir/vmlinuz"
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  ZSTD_CLEVEL=19 make CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 KCFLAGS="-march=native -mtune=native -O3 -pipe" INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 \
    DEPMOD=/doesnt/exist modules_install  # Suppress depmod
  rm "$modulesdir"/build
}

_package-headers() {
  depends=(pahole)
  cd linux-next
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux tools/bpf/bpftool/vmlinux.h
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts
  ln -srt "$builddir" "$builddir/scripts/gdb/vmlinux-gdb.py"

  install -Dt "$builddir/tools/objtool" tools/objtool/objtool
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;
  if compgen -G "rust/*.rmeta" 1>/dev/null; then
      install -Dt "$builddir/rust" -m644 rust/*.rmeta
  fi
  if compgen -G "rust/*.so" 1>/dev/null; then
      install -Dt "$builddir/rust" rust/*.so
  fi

  make CC=clang LD=ld.lld LLVM=1 LLVM_IAS=1 KCFLAGS="-march=native -mtune=native -O3 -pipe" INSTALL_MOD_PATH="$pkgdir/usr" vdso_install \
    link=  # Suppress build-id symlinks

  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  find -L "$builddir" -type l -printf 'Removing %P\n' -delete
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  local file
  while read -rd '' file; do
    case "$(file -Sib "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  strip -v $STRIP_STATIC "$builddir/vmlinux"

  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

pkgname=("$pkgbase" "$pkgbase-headers")
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done
